.. _policies:

********
Policies
********

.. versionadded:: 3.0.0

API version policy
==================

HDMF uses a loose variant of semantic versioning (`SemVer`_) to govern
deprecations, API compatibility, and version numbering.

An HDMF release number is made up of ``MAJOR.MINOR.PATCH``.

API breaking changes should only occur in **major** releases. These changes
will be documented, with clear guidance on what is changing, why it's changing,
and how to migrate existing code to the new behavior.

Whenever possible, a deprecation path will be provided rather than an outright
breaking change.

HDMF will introduce deprecations in **minor** releases. These deprecations
will preserve the existing behavior while emitting a warning that provide
guidance on:

* How to achieve similar behavior if an alternative is available
* The HDMF version in which the deprecation will be enforced.

We will not introduce new deprecations in patch releases.

Deprecations will only be enforced in **major** releases. For example, if a
behavior is deprecated in HDMF 3.1.0, it will continue to work, with a
warning, for all releases in the 3.x series. The behavior will change and the
deprecation removed in the next major release (4.0.0).

.. note::

   HDMF will sometimes make *behavior changing* bug fixes, as part of
   minor or patch releases. Whether or not a change is a bug fix or an
   API-breaking change is a judgement call. We'll do our best, and we
   invite you to participate in development discussion on the issue
   tracker.

These policies do not apply to features marked as **experimental** in the
documentation. These experimental features include all functionality in the
"hdmf.experimental" package and in the "hdmf.experimental" namespace. HDMF
may change the behavior of experimental features at any time.

An installed HDMF version contains the ``__version__`` field:

TODO: update versioneer to 0.19 and use proper pep 440 naming.
setup.py normalizes 3.0.1.post.dev4 to 3.0.1.post0.dev4.
TODO: change versioning to be .dev0+<git-commit-hash>

.. code-block:: python

   # complete version string, including suffix ".post.devX" for dev versions
   # e.g., "3.0.1" or "3.0.1.post.dev4"
   hdmf.__version__

This policy is adapted heavily from the `pandas version policy`_ and the
`scipy version policy`_.

Python support
==============

HDMF will only drop support for specific Python versions (e.g., 3.6.x, 3.7.x) in
HDMF **major** or **minor** releases.

API file reading compatibility
==============================

**Older file compatibility**: The HDMF API should be able to read files
generated by earlier releases in the same major release series,
For example, HDMF API version 3.2.0 should be able to read files generated by
HDMF API versions 3.0.0 to 3.2.0.

.. note::
   If HDMF reads a file containing an older, cached release of the HDMF schema
   and then modifies the file, the file will be written with the newer release of
   the schema. As a precaution, after writing the file, the file should be
   validated against the newer release of the schema to ensure compliance.

.. note::
   These policies do not apply to features marked as **experimental** in the
   documentation. These experimental features include all functionality in the
   "hdmf.experimental" package and in the "hdmf.experimental" namespace. HDMF
   may change the behavior of experimental features at any time. Data written
   using types in the "hdmf.experimental" namespace may not be readable in
   future releases of HDMF.

**Newer file compatibility**: An older release of the HDMF API may not be able
to read some data generated by later releases of the HDMF API, particularly if
the data uses data types that are not in the older release.

Schema compatibility
====================

In this section, "HDMF schema" refers to the schema defined by the HDMF common
namespace and does not include the schema defined by the HDMF experimental
namespace.

**Forward compatibility**: An HDMF file compliant with HDMF schema ``x.y``
should be generally compliant with later minor releases of HDMF schema
``x.(y+1)``.

Later minor and patch releases of the HDMF schema may:

- add new data types
- add new optional fields
- make required fields optional
- include additional allowed shapes for datasets and attributes
- include additional quantities of groups, datasets, and links
- change the dtype of datasets and attributes to a compatible dtype
- add a default name or default value
- change the doc key of fields
- change the parent type of a type such that existing is-a-subtype
  relationships are maintained
- make other changes that loosen restrictions imposed by a previous release

Later minor and patch releases of the HDMF schema should not:

- remove data types
- add new required fields
- make optional fields optional
- remove allowed shapes for datasets and attributes
- remove allowed quantities for groups, datasets, and links
- change the dtype of datasets and attributes to an incompatible dtype
- remove a default name or default value
- change the parent type of a type such that existing is-a-subtype
  relationships are not maintained
- make other changes that make files compliant with an earlier release
  in the same major release series no longer compliant

Rare exceptions to this rule, such as bug fixes, may be made and will be
noted in the HDMF schema release notes. Whether or not a change merits a
major release is a judgement call. We'll do our best, and we invite you
to participate in development discussion on the issue tracker.

- For example, a data type may be added in HDMF schema 2.2.0 and, shortly
  after, it was found that the shape was specified incorrectly and the
  type cannot be used as intended. This may be fixed in HDMF schema
  2.2.1. In this case, an HDMF schema 2.2.0 file that includes the dataset
  with the wrong shape will not be compliant with HDMF schema 2.2.1 or later
  releases.

**Backward compatibility**: An HDMF file compliant with HDMF schema ``x.y`` is
not necessarily compliant with earlier releases of the HDMF schema.

- For example, a field that is required in HDMF schema 2.0 may become optional
  in HDMF schema 2.1. So, a file compliant with HDMF schema 2.1 may be missing
  that field, which would make it not compliant with HDMF schema 2.0.

**Validation**: The HDMF validator is continually being improved and patched.
Files that succeed validation against a particular schema in an older version
of the HDMF API may not succeed validation in a newer version of the HDMF API
against the same schema.

.. _SemVer: https://semver.org
.. _pandas version policy: https://pandas.pydata.org/docs/development/policies.html
.. _scipy version policy: https://docs.scipy.org/doc/scipy/reference/dev/core-dev/index.html?#version-numbering
